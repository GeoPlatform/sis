/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _org_apache_sis_openoffice_XReferencing_
#define _org_apache_sis_openoffice_XReferencing_

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/sheet/AddIn.idl>


module org {
  module apache {
    module sis {
      module openoffice {
        /// Methods from the org.apache.sis.referencing package to make available to OpenOffice.
        interface XReferencing : com::sun::star::uno::XInterface {
          /// Returns an identified object name from an authority code.
          string getName(
            [in] com::sun::star::beans::XPropertySet xOptions,
            /// The authority code (e.g. "EPSG:4326").
            [in] string authorityCode
          );

          /// Returns the axis name for the specified dimension in an identified object.
          string getAxis(
            [in] com::sun::star::beans::XPropertySet xOptions,
            /// The authority code (e.g. "EPSG:4326").
            [in] string authorityCode,
            /// The dimension (1, 2, ...).
            [in] long dimension
          );

          /// Returns the domain of validity as a geographic bounding box for an identified object.
          sequence< sequence< double > > getGeographicArea(
            [in] com::sun::star::beans::XPropertySet xOptions,
            /// The authority code (e.g. "EPSG:4326").
            [in] string authorityCode
          );

          /// Returns the accuracy of a transformation between two coordinate reference systems.
          double getAccuracy(
            [in] com::sun::star::beans::XPropertySet xOptions,
            /// The source coordinates to transform.
            [in] string sourceCRS,
            /// Authority code of the target coordinate reference system.
            [in] string targetCRS,
            /// The source coordinates to transform.
            [in] sequence< sequence< double > > coordinates
          );

          /// Transforms a list of coordinates from source CRS to target CRS.
          sequence< sequence< double > > transformCoordinates(
            [in] com::sun::star::beans::XPropertySet xOptions,
            /// Authority code of the source coordinate reference system.
            [in] string sourceCRS,
            /// Authority code of the target coordinate reference system.
            [in] string targetCRS,
            /// The source coordinates to transform.
            [in] sequence< sequence< double > > coordinates
          );

          /// Converts text in degrees-minutes-seconds to an angle in decimal degrees.
          double parseAngle(
            [in] com::sun::star::beans::XPropertySet xOptions,
            /// The text to be converted to an angle.
            [in] string text,
            /// The text that describes the format (example: "D MM.m'").
            [in] any pattern
          ) raises (com::sun::star::lang::IllegalArgumentException);

          /// Converts an angle to text according to a given format.
          string formatAngle(
            [in] com::sun::star::beans::XPropertySet xOptions,
            /// The angle value (in decimal degrees) to be converted.
            [in] double value,
            /// The text that describes the format (example: "D MM.m'").
            [in] any pattern
          ) raises (com::sun::star::lang::IllegalArgumentException);
        };

        /*
         * Exported interfaces:
         * This is where we put all interfaces that this service exports.
         */
        service Referencing {
          interface XReferencing;

          /*
           * Necessary base service.
           * All add-ins must implement this service.
           */
          service com::sun::star::sheet::AddIn;
        };
      };
    };
  };
};

#endif
